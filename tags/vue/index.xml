<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Vue on 代码如歌</title><link>https://insua.github.io/tags/vue/</link><description>Recent content in Vue on 代码如歌</description><generator>Hugo -- 0.141.0</generator><language>en-us</language><lastBuildDate>Tue, 09 Oct 2018 11:44:54 +0000</lastBuildDate><atom:link href="https://insua.github.io/tags/vue/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在 Vue Spa 中使用微信jssdk分享接口</title><link>https://insua.github.io/post/2018/10-09-how-to-use-wechat-jssdk-share-in-vue-spa/</link><pubDate>Tue, 09 Oct 2018 11:44:54 +0000</pubDate><guid>https://insua.github.io/post/2018/10-09-how-to-use-wechat-jssdk-share-in-vue-spa/</guid><description>&lt;p>在Vue Spa项目中，使用了 History 模式，要使用分享接口，只能在第一次访问的时候，就加载jssdk配置，通过Vue router进入其他页面之后再做加载，虽然在调试模式下依然会显示配置正确，但是分享接口是无效的，那么怎么办呢？直接在App.vue下就做jssdk config&lt;/p>
&lt;h3 id="实现步骤">实现步骤&lt;/h3>
&lt;h4 id="编写后端接口">编写后端接口&lt;/h4>
&lt;p>使用了 overture/wechat&lt;/p>
&lt;pre tabindex="0">&lt;code>public function jssdk(Request $request)
{
$this-&amp;gt;jssdk-&amp;gt;setUrl($request-&amp;gt;input(&amp;#39;url&amp;#39;));
return $this-&amp;gt;jssdk-&amp;gt;buildConfig([
&amp;#39;onMenuShareAppMessage&amp;#39;,
&amp;#39;onMenuShareWechat&amp;#39;,
&amp;#39;onMenuShareTimeline&amp;#39;,
&amp;#39;getLocation&amp;#39;
], false);
}
&lt;/code>&lt;/pre>&lt;h4 id="在appvue中注入配置">在App.vue中注入配置&lt;/h4>
&lt;p>引入wexin-js-sdk&lt;/p>
&lt;pre tabindex="0">&lt;code>const wx = require(&amp;#39;weixin-js-sdk&amp;#39;)
&lt;/code>&lt;/pre>&lt;p>方法&lt;/p>
&lt;pre tabindex="0">&lt;code>async getJssdk () {
const { data } = await this.$axios.post(&amp;#39;/api/wechat-work/jssdk&amp;#39;, { url: window.location.href })
wx.config(data)
}
&lt;/code>&lt;/pre>&lt;h4 id="在分享页面中编写分享方法">在分享页面中编写分享方法&lt;/h4>
&lt;p>引入wexin-js-sdk&lt;/p>
&lt;pre tabindex="0">&lt;code>const wx = require(&amp;#39;weixin-js-sdk&amp;#39;)
&lt;/code>&lt;/pre>&lt;p>在__mounted__里写入分享方法&lt;/p>
&lt;pre tabindex="0">&lt;code>wx.ready(() =&amp;gt; {
const self = this
wx.onMenuShareTimeline({
title: self.shareTitle,
link: window.location.href,
imgUrl: self.logoPath,
success: function () {
self.forward(&amp;#39;onMenuShareTimeline&amp;#39;)
self.$toast.success(&amp;#39;分享成功&amp;#39;)
},
cancel: function () {
self.$toast.fail(&amp;#39;取消分享&amp;#39;)
}
})
})
&lt;/code>&lt;/pre>&lt;p>最后在__destroyed__里重写分享方法，以终止分享接口&lt;/p></description></item><item><title>使用Sortable.js和Vue.Draggable的一些坑</title><link>https://insua.github.io/post/2018/05-17-use-vue-draggable-and-sortable-js/</link><pubDate>Thu, 17 May 2018 17:55:47 +0000</pubDate><guid>https://insua.github.io/post/2018/05-17-use-vue-draggable-and-sortable-js/</guid><description>&lt;p>Sortable.js 是拖拽列表最著名的库，而 Vue.Draggable 是其在 Vue 中的封装，在 vue 中引入十分的方便。&lt;/p>
&lt;p>但是我在项目中的需求是左侧列表初始时是空的，从右侧列表拖动到左侧生成，这就造成了一个问题，左侧因为没有dom节点而拖不过来，这时就需要在左侧的 draggable 组件添加一个 min-height 的 css 属性。&lt;/p>
&lt;p>另一个问题是，在使用 clone 模式时，因为 js 对象都是指向同一个指针的，再从右侧拖动到左侧的节点，当修改其属性时，把所有拖拽过来的相同节点也都修改了。&lt;br>
我的解决方法是，把右侧改为 pull 模式，同时使用 vue 的 watch，当右侧的列表发生变化时重新生成，这样就和初始化的对象完全脱离了。&lt;/p></description></item><item><title>在vue中使用viewerjs</title><link>https://insua.github.io/post/2018/04-22-use-viewerjs-in-vue/</link><pubDate>Sun, 22 Apr 2018 08:49:17 +0000</pubDate><guid>https://insua.github.io/post/2018/04-22-use-viewerjs-in-vue/</guid><description>&lt;p>在 vue中使用viewerjs 必须执行 viewer.update&lt;/p>
&lt;pre tabindex="0">&lt;code>const viewer = new Viewer(this.$refs.image)
this.$nextTick().then(() =&amp;gt; {
viewer.update()
})
viewer.view(0)
&lt;/code>&lt;/pre>&lt;p>当然最后别忘了引入css&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">@import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;~viewerjs/dist/viewer.css&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>